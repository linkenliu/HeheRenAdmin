package com.heheren.utils;

import java.io.IOException;
import java.lang.reflect.Field;

import org.apache.log4j.Logger;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;

/**
 * 瑙ｅ喅jackson杈撳嚭null涓虹┖瀛楃涓层�鍗曞紩鍙枫�瀛楁鍜屾暟瀛楀姞寮曞彿闂.
 * 
 * @author wangchenbo
 *
 */
public class ObjectMappingCustomer extends ObjectMapper {

	protected Logger	logger	= Logger.getLogger(this.getClass());

	public ObjectMappingCustomer() {
		super();
		// 鍏佽鍗曞紩鍙�
		this.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);
		// 瀛楁鍜屽�閮藉姞寮曞彿
		this.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
		// 杞箟瀛楃-寮傚父鎯呭喌
		this.configure(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, true);
		// 鏁板瓧涔熷姞寮曞彿
		this.configure(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS, true);
		this.configure(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS, true);

		// 绌哄�澶勭悊涓虹┖涓�
		this.getSerializerProvider().setNullValueSerializer(new JsonSerializer<Object>() {

			@Override
			public void serialize(Object value, JsonGenerator jg, SerializerProvider sp) throws IOException, JsonProcessingException {

				try {
					String currentName = jg.getOutputContext().getCurrentName();

					Field[] fields = jg.getCurrentValue().getClass().getDeclaredFields();

					boolean isFound = false, isAssigned = false;

					for (Field field : fields) {
						if (field.getName().equalsIgnoreCase(currentName)) {
							if (field.getType() == Integer.class) {
								jg.writeString("0");
								isAssigned = true;
							} else {
								jg.writeString("");
								isAssigned = true;
							}
							isFound = true;
							break;
						}
					}

					if (!isFound) {
						Class<?> superClass = jg.getCurrentValue().getClass().getSuperclass();
						if (superClass != Object.class) {

							Field[] parentFields = superClass.getDeclaredFields();
							for (Field f : parentFields) {
								if (f.getName().equalsIgnoreCase(currentName)) {
									if (f.getType() == Integer.class) {
										jg.writeString("0");
										isAssigned = true;
									} else {
										jg.writeString("");
										isAssigned = true;
									}
									break;
								}
							}
						}
					}
					if (!isAssigned) {
						jg.writeString("");
					}
				}
				catch (Exception e) {
					logger.error("澶勭悊null鍊兼椂鍑洪敊:", e);
					jg.writeString("");
				}

			}
		});

	}
}
